{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sudoku DLX","text":"<p>Fast Sudoku solver &amp; generator using Algorithm X / Dancing Links with Python bitsets. Includes unique/minimal generation, difficulty v2, canonicalization, explainable steps, batch tools, and a JS demo.</p> <p>Repo: :octicons-mark-github-16: GitHub \u00b7 Docs: this site \u00b7 Demo: GitHub Pages <code>web/</code> and <code>visualizer.html</code>.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Bitset DLX solver with stats (nodes, backtracks)</li> <li>Unique/minimal generator with symmetry controls</li> <li>Deterministic difficulty v2 ([0,10])</li> <li>Canonical form &amp; dataset de-duplication</li> <li>Human strategies: singles, pairs, triples, X-Wing, Swordfish, Simple Coloring</li> <li>CLI for solve/rate/gen/canon/explain/batch</li> </ul>"},{"location":"#install","title":"Install","text":"<pre><code>python -m pip install sudoku_dlx  # (after PyPI publish)\n</code></pre> <p>For development:</p> <pre><code>git clone https://github.com/SaridakisStamatisChristos/sudoku_dlx\ncd sudoku_dlx\npython -m venv .venv &amp;&amp; source .venv/bin/activate\npip install -e \".[dev]\"\n</code></pre> <p>Optional SAT cross-check:</p> <pre><code>pip install -e \".[sat]\"\n</code></pre>"},{"location":"#hello-sudoku","title":"Hello Sudoku","text":"<pre><code>from sudoku_dlx import from_string, solve, to_string, explain\ng = from_string(\"53..7....6..195... ...\")  # 81 chars; dots for blanks\nres = solve(g)\nprint(to_string(res.grid))\nsteps = explain(g, max_steps=200)\nprint(steps[\"steps\"][:3])  # preview moves\n</code></pre>"},{"location":"#links","title":"Links","text":"<ul> <li>CLI Guide: CLI reference</li> <li>API Reference: Python API</li> <li>Strategies: Human strategies</li> <li>Batch: Datasets &amp; tooling</li> </ul>"},{"location":"api/","title":"Python API","text":"<pre><code>from sudoku_dlx import (\n  from_string, to_string, is_valid, solve, analyze, rate,\n  count_solutions, generate, canonical_form, explain,\n  build_reveal_trace, sat_solve\n)\n</code></pre>"},{"location":"api/#parsing","title":"Parsing","text":"<pre><code>g = from_string(\"53..7....6..195... ...\")  # 81 chars; .,0,-,_ are blanks\ns = to_string(g)                             # always 81 chars with dots for blanks\n</code></pre>"},{"location":"api/#solve","title":"Solve","text":"<pre><code>res = solve(g)  # None if unsolvable/invalid\nres.grid        # 9x9 list of ints\nres.stats.ms, res.stats.nodes, res.stats.backtracks\n</code></pre>"},{"location":"api/#analyze","title":"Analyze","text":"<pre><code>analyze(g)  # dict: {valid, solvable, unique, givens, difficulty, stats{...}}\n</code></pre>"},{"location":"api/#generate","title":"Generate","text":"<pre><code>p = generate(seed=123, target_givens=30, minimal=True, symmetry=\"mix\")\n</code></pre>"},{"location":"api/#canonical-form","title":"Canonical form","text":"<pre><code>can = canonical_form(g)  # 81-char canonical string (isomorphism-invariant)\n</code></pre>"},{"location":"api/#difficulty","title":"Difficulty","text":"<pre><code>score = rate(g)  # [0, 10], deterministic (nodes/backtracks/gaps/fill)\n</code></pre>"},{"location":"api/#explain-human-steps","title":"Explain (human steps)","text":"<pre><code>exp = explain(g, max_steps=200)\nexp[\"steps\"]     # list of {type, strategy, ...}\nexp[\"progress\"]  # 81-char after steps\nexp[\"solution\"]  # full solution string (if solvable)\n</code></pre>"},{"location":"api/#trace-solution-reveal","title":"Trace (solution reveal)","text":"<pre><code>trace = build_reveal_trace(g, res.grid, res.stats)\n# keys: version, kind, initial, solution, steps, stats\n</code></pre>"},{"location":"api/#sat-cross-check-optional","title":"SAT cross-check (optional)","text":"<pre><code>sat = sat_solve(g)   # requires python-sat; returns 9x9 grid or None\n</code></pre>"},{"location":"batch/","title":"Batch &amp; Datasets","text":""},{"location":"batch/#generate-many-puzzles","title":"Generate many puzzles","text":"<pre><code>sudoku-dlx gen-batch --out puzzles.txt --count 1000 --givens 30 \\\n  --min-givens 28 --max-givens 40 --parallel 8\n</code></pre> <p>Puzzles are written one per line in canonical form, de-duplicated.</p>"},{"location":"batch/#rate-a-file","title":"Rate a file","text":"<pre><code>sudoku-dlx rate-file --in puzzles.txt --json &gt; scores.ndjson\n</code></pre>"},{"location":"batch/#stats-with-sampling","title":"Stats with sampling","text":"<pre><code>sudoku-dlx stats-file --in puzzles.txt --limit 5000 --sample 1000 --json stats.json\n</code></pre>"},{"location":"batch/#dedupe-a-file","title":"Dedupe a file","text":"<pre><code>sudoku-dlx dedupe --in puzzles.txt --out unique.txt\n</code></pre>"},{"location":"batch/#convert-between-formats","title":"Convert between formats","text":"<p>Supported: txt (one 81-char per line), csv (column grid), jsonl/ndjson ({\"grid\": \"...\"} per line).</p> <pre><code>sudoku-dlx convert --in puzzles.txt --out puzzles.csv\nsudoku-dlx convert --in puzzles.csv --out puzzles.jsonl\n</code></pre>"},{"location":"batch/#batch-explain","title":"Batch explain","text":"<p>Produce one JSON object per line with steps and progress:</p> <pre><code>sudoku-dlx explain-file --in puzzles.txt --out steps.ndjson --max-steps 200\n</code></pre>"},{"location":"batch/#export-to-cnf","title":"Export to CNF","text":"<pre><code>sudoku-dlx to-cnf --grid \"&lt;81chars&gt;\" --out puzzle.cnf\n</code></pre>"},{"location":"changelog/","title":"Changelog (highlights)","text":""},{"location":"changelog/#010","title":"0.1.0","text":"<ul> <li>Bitset DLX solver with stats</li> <li>Unique/minimal generator (symmetry options)</li> <li>Canonicalization &amp; dedupe</li> <li>Difficulty v2 (deterministic)</li> <li>Explain with human strategies (singles, pairs, triples, X-Wing, Swordfish, Simple Coloring)</li> <li>Batch tools (<code>gen-batch</code>, <code>rate-file</code>, <code>stats-file</code>, <code>dedupe</code>)</li> <li>Trace export + visualizer (<code>web/visualizer.html</code>)</li> </ul>"},{"location":"cli/","title":"CLI Guide","text":"<p>Run <code>sudoku-dlx --help</code> for a full list.</p>"},{"location":"cli/#solve","title":"Solve","text":"<pre><code>sudoku-dlx solve --grid \"&lt;81chars&gt;\" [--pretty] [--stats] [--trace out.json] [--crosscheck sat]\n</code></pre>"},{"location":"cli/#generate","title":"Generate","text":"<pre><code>sudoku-dlx gen --seed 123 --givens 30 [--minimal] [--symmetry none|rot180|mix] [--pretty]\n</code></pre>"},{"location":"cli/#rate","title":"Rate","text":"<pre><code>sudoku-dlx rate --grid \"&lt;81chars&gt;\"\n</code></pre>"},{"location":"cli/#check-analyze","title":"Check (analyze)","text":"<pre><code>sudoku-dlx check --grid \"&lt;81chars&gt;\" [--json]\n</code></pre>"},{"location":"cli/#canonicalize","title":"Canonicalize","text":"<pre><code>sudoku-dlx canon --grid \"&lt;81chars&gt;\"\n</code></pre>"},{"location":"cli/#explain-human-steps","title":"Explain (human steps)","text":"<pre><code>sudoku-dlx explain --grid \"&lt;81chars&gt;\" [--json] [--max-steps 200]\n</code></pre>"},{"location":"cli/#batch-tools","title":"Batch tools","text":"<pre><code># Generate unique canonical puzzles\nsudoku-dlx gen-batch --out puzzles.txt --count 1000 --givens 30 \\\n  --min-givens 28 --max-givens 40 --parallel 8\n\n# Rate file (JSON lines)\nsudoku-dlx rate-file --in puzzles.txt --json &gt; scores.ndjson\n\n# Stats with sampling &amp; histogram CSV\nsudoku-dlx stats-file --in puzzles.txt --limit 5000 --sample 1000 --json stats.json\n</code></pre>"},{"location":"cli/#convert-formats","title":"Convert formats","text":"<pre><code># auto-detects txt/csv/jsonl by extension\nsudoku-dlx convert --in puzzles.txt --out puzzles.csv\nsudoku-dlx convert --in puzzles.csv --out puzzles.jsonl\n</code></pre>"},{"location":"cli/#explain-batch","title":"Explain (batch)","text":"<pre><code>sudoku-dlx explain-file --in puzzles.txt --out steps.ndjson --max-steps 200\n</code></pre>"},{"location":"cli/#export-to-dimacs-cnf","title":"Export to DIMACS CNF","text":"<pre><code>sudoku-dlx to-cnf --grid \"&lt;81chars&gt;\" --out puzzle.cnf\n</code></pre>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#solve-a-puzzle","title":"Solve a puzzle","text":"<pre><code>sudoku-dlx solve --grid \"&lt;81chars&gt;\" --pretty --stats\n</code></pre>"},{"location":"quickstart/#generate","title":"Generate","text":"<pre><code>sudoku-dlx gen --seed 123 --givens 30 --pretty\nsudoku-dlx gen --seed 123 --givens 28 --minimal --symmetry rot180\n</code></pre>"},{"location":"quickstart/#rate","title":"Rate","text":"<pre><code>sudoku-dlx rate --grid \"&lt;81chars&gt;\"\n</code></pre>"},{"location":"quickstart/#analyze-validuniquedifficulty","title":"Analyze (valid/unique/difficulty)","text":"<pre><code>sudoku-dlx check --grid \"&lt;81chars&gt;\" --json\n</code></pre>"},{"location":"quickstart/#explain-steps","title":"Explain steps","text":"<pre><code>sudoku-dlx explain --grid \"&lt;81chars&gt;\" --json --max-steps 200\n</code></pre>"},{"location":"quickstart/#batch-generate-stats","title":"Batch generate &amp; stats","text":"<pre><code>sudoku-dlx gen-batch --out puzzles.txt --count 1000 --givens 30 --parallel 8\nsudoku-dlx stats-file --in puzzles.txt --limit 5000 --sample 1000 --json stats.json\n</code></pre>"},{"location":"quickstart/#trace-visualization","title":"Trace &amp; visualization","text":"<pre><code>sudoku-dlx solve --grid \"&lt;81chars&gt;\" --trace out.json\n# Open web/visualizer.html and load out.json\n</code></pre>"},{"location":"strategies/","title":"Human Strategies","text":"<p>Deterministic ordering, one elimination per step for stable playback:</p>"},{"location":"strategies/#placements","title":"Placements","text":"<ul> <li>Naked single \u2014 only one candidate in a cell</li> <li>Hidden single \u2014 the only place for a digit in a unit (row/col/box)</li> </ul>"},{"location":"strategies/#eliminations","title":"Eliminations","text":"<ul> <li>Locked candidates</li> <li>Pointing (box \u2192 line)</li> <li>Claiming (line \u2192 box)</li> <li>Pairs</li> <li>Naked pair</li> <li>Hidden pair</li> <li>Triples</li> <li>Naked triple</li> <li>Hidden triple</li> <li>Fish</li> <li>X-Wing (rows/cols)</li> <li>Swordfish (rows/cols)</li> <li>Coloring</li> <li>Simple coloring (Rule 2)</li> </ul> <p>These are implemented in <code>sudoku_dlx/strategies.py</code> and consumed by <code>explain()</code>.</p>"}]}